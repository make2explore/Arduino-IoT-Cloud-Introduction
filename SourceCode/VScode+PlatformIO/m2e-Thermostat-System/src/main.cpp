/* 
  Sketch generated by the Arduino IoT Cloud Thing "Thermostat System"
  https://create.arduino.cc/cloud/things/61938b73-b8eb-4da5-85a1-fc2519f502f6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String status;
  float humidity;
  float temperature;
  bool cooler;
  bool heater;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// ---------------------------------- make2explore.com -------------------------------------------------------//
// Project           - Arduino-IoT-Cloud-Introduction : Arduino MKR WiFi 1010 based Thermostat System
// Created By        - info@make2explore.com
// Last Modified     - 12/04/2023 12:30:00 @admin
// Software          - C/C++, PlatformIO IDE, Visual Studio Code Editor, Libraries
// Hardware          - Arduino Maker Wifi 1010, OLED Display, Sensors         
// Sensors Used      - DHT22
// Source Repo       - github.com/make2explore
// -----------------------------------------------------------------------------------------------------------//
// Include Libraries
#include <SNU.h>
#include "arduino_secrets.h"      // WiFi Credentials
#include "thingProperties.h"      // Code generated by Arduino IoT Cloud, DO NOT EDIT.
#include <Adafruit_GFX.h>         // Include core graphics library
#include <Adafruit_SSD1306.h>     // Include Adafruit_SSD1306 Library to drive the OLED display
#include "DHT.h"                  // Include DHT Sensors library

// Pin definitions for Relay 
#define coolerRelay 6             // Relay control Pin - Cooler/Fan will be connected to Pin 6
#define heaterRelay 7             // Relay control Pin - Heater will be connected to Pin 7

// Pin defintions of Status LED's
#define blueLED 3                 // Status LED for - Cooler Environment  : Low Temperature
#define greenLED 4                // Status LED for - Normal Environment  : Normal Temperature
#define redLED 5                  // Status LED for - Heated Environment  : High Temperature

// Pin defintions, declarations and settings of DHT sensor
#define DHTPIN 8                  // Digital pin connected to the DHT sensor
#define DHTTYPE DHT22             // DHT 22  (AM2302), AM2321
DHT dht(DHTPIN, DHTTYPE);         // DHT instance initilized

// Pin defintions, declarations and settings of OLED Display
// OLED Screen size 128x64
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);     // Display instance initilized


// make2explore Systems Logo bitmap converted file
static const uint8_t image_data_096OLEDscreens[1024] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3f, 0xfc, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xff, 0xff, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0xff, 0x3f, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xff, 0x3f, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0xfe, 0x1f, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3f, 0xf8, 0x07, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7f, 0xf8, 0x07, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7f, 0xfe, 0x1f, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0x3f, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0xff, 0x3f, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0xff, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0xff, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0xff, 0xfe, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xff, 0xf8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xff, 0xe0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xf8, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xe0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xc0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xfe, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7e, 0x07, 0xf8, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7e, 0x07, 0xf8, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3e, 0x07, 0xf8, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Initialize GPIO -  Input/Output Pins and Ports
void init_GPIO(){
  pinMode(coolerRelay, OUTPUT);       // Relay control Pin - Cooler/Fan will be connected to Pin 6
  pinMode(heaterRelay, OUTPUT);       // Relay control Pin - Heater will be connected to Pin 7

  digitalWrite(coolerRelay, HIGH);    // Relay Board work with Active Low Logic - So Give HIGH
  digitalWrite(heaterRelay, HIGH);    // To Turn OFF both the Relays initially

  pinMode(blueLED, OUTPUT);           // Staus LED Pins As a Output
  pinMode(greenLED, OUTPUT);          // Staus LED Pins As a Output
  pinMode(redLED, OUTPUT);            // Staus LED Pins As a Output

  digitalWrite(blueLED, LOW);         // Initially Staus LED's are OFF
  digitalWrite(greenLED, LOW);        // Initially Staus LED's are OFF
  digitalWrite(redLED, LOW);          // Initially Staus LED's are OFF
}   

//  Function to Initilize the OLED Display and Print Initial Messages
void init_Display(){

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000); // Pause for 2 seconds

  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen (make2explore Logo)
  display.drawBitmap(0, 0, image_data_096OLEDscreens, 128, 64, 1);
  
  // Set Text Size, Color, and Postion (x,y)
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(20, 56);

  // Display static text
  display.println("make2explore.com");
  display.display();
  delay(5000);

  // Clear the buffer.
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(5, 10);
  display.println("WiFi Connecting...");
  display.display();
  delay(5000);
  
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setCursor(5, 10);
  display.println("WiFi Connected");
  display.setCursor(5, 30);
  display.println("Sensor OK !");
  display.setCursor(5, 50);
  display.println("Fetching Readings..!"); 
  display.display();
}

// Function to fetch the Temerature and Humidity Readings from DHT Sensor
void get_Readings(){
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  temperature = t;
  humidity = h;
}

// Function For Displaying Temerature and Humidity Readings on OLED Display
void display_Readings(){
  display.clearDisplay();
  display.drawRect(0, 0, 126, 62, WHITE);
  display.fillRect(0, 0, 126, 16, WHITE);
  display.setCursor(6,5);
  display.setTextColor(BLACK);
  display.setTextSize(0);
  display.print("Thermostat System");
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(5,23);
  display.print("Temp: ");
  
  display.setTextSize(2);
  display.setCursor(40,21);
  display.print(temperature);
  
  display.setCursor(104,21);
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.setCursor(112,21);
  display.print("C");
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(5,45);
  display.print("Humi: ");
  
  display.setCursor(40,44);
  display.setTextSize(2);
  display.print(humidity);
  
  display.setCursor(112,44);
  display.print("%");
   
  display.display();
  delay(1000);
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Init Functions for Interfacings
  init_Display();
  init_GPIO();
  dht.begin();
}

// Main Loop
void loop() {
  ArduinoCloud.update();
  // Your code here 
  get_Readings();
  display_Readings();

  // we will create three main conditionals. 
  // Each of these checks whether temperature is within a specific range 
  // and executes the code within the conditional statement.
  if (temperature < 19) {
    digitalWrite(greenLED, LOW);
    digitalWrite(blueLED, HIGH);
    digitalWrite(heaterRelay, LOW);
    status = "Low Temperature - Heater ON";
    heater = HIGH;

  } else if (temperature >= 20 && temperature <= 25) {
    digitalWrite(greenLED, HIGH);
    digitalWrite(heaterRelay, HIGH);
    digitalWrite(coolerRelay, HIGH);
    status = "Normal Temperature - Heater OFF, Cooler OFF";

  } else if (temperature > 26) {
    digitalWrite(greenLED, LOW);
    digitalWrite(redLED, HIGH);
    digitalWrite(coolerRelay, LOW);
    status = "High Temperature - Cooler ON";
    cooler = HIGH;
  }
  delay(1000);
}


/*
  Since Cooler is READ_WRITE variable, onCoolerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCoolerChange()  {
  // Add your code here to act upon Cooler change
  // In Manual Mode :
  // If We change/Toggle Cooler control switch on Cloud Dashboard
  // It will change the status of Hardware from this function 
  if(cooler == HIGH){
    digitalWrite(coolerRelay, LOW);
  } else if (cooler == LOW){
    digitalWrite(coolerRelay, HIGH);
  }
}

/*
  Since Heater is READ_WRITE variable, onHeaterChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHeaterChange()  {
  // Add your code here to act upon Heater change
  // In Manual Mode :
  // If We change/Toggle Heater control switch on Cloud Dashboard
  // It will change the status of Hardware from this function 
  if(heater == HIGH){
    digitalWrite(heaterRelay, LOW);
  } else if (heater == LOW){
    digitalWrite(heaterRelay, HIGH);
  }
}

